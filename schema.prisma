generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

datasource db {
    provider  = "postgresql"
    url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
    directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
    id               Int         @id @default(autoincrement())
    name             String?     @db.VarChar(255)
    username         String?     @db.VarChar(50)
    addressId        Int?
    Address          Address?    @relation(fields: [addressId], references: [id])
    password         String?     @db.VarChar(255)
    email            String      @unique @db.VarChar(255)
    phone            String?     @db.VarChar(15)
    avatar           String?     @db.VarChar(255)
    isOnbordered     Boolean     @default(false)
    isActive         Boolean     @default(true)
    isSocialAuth     Boolean     @default(false)
    isAccessPassword Boolean     @default(false)
    role             String?     @db.VarChar(15)
    lastWorkspaceId  Int? // Tornando o campo opcional (pode ser nulo)
    useCase          String?     @db.VarChar(50)
    onboardingStep   Json        @default("{\"profile_complete\":false,\"workspace_create\":false,\"workspace_information\":false,\"workspace_join\":false}")
    createdAt        DateTime    @default(now()) @db.Timestamp(6)
    workspaces       Workspace[]
}

model Address {
    id           Int         @id @default(autoincrement())
    cep          String?     @db.VarChar(10)
    address      String?     @db.VarChar(50)
    number       String?     @db.VarChar(11)
    neighborhood String?     @db.VarChar(50)
    city         String?     @db.VarChar(50)
    state        String?     @db.VarChar(50)
    complement   String?     @db.VarChar(50)
    Workspace    Workspace[]
    User         User[]
}

model Customer {
    id             Int        @id @default(autoincrement())
    name           String
    gender         String?    @db.VarChar(20)
    individual     Boolean    @default(true)
    isOnboarded    Boolean    @default(false)
    document       String     @db.VarChar(20)
    mobile         String     @db.VarChar(20)
    phone          String?    @db.VarChar(20)
    email          String     @db.VarChar(100)
    password       String?    @db.VarChar(200)
    street         String?    @db.VarChar(70)
    number         String?    @db.VarChar(15)
    neighborhood   String?    @db.VarChar(45)
    city           String?    @db.VarChar(45)
    state          String?    @db.VarChar(20)
    zipCode        String?    @db.VarChar(20)
    workspaceId    Int
    Workspace      Workspace? @relation(fields: [workspaceId], references: [id])
    contactPerson  String?    @db.VarChar(45)
    additionalInfo String?    @db.VarChar(45)
    supplier       Boolean    @default(false)
    createdAt      DateTime   @default(now())
    updatedAt      DateTime   @updatedAt

    @@unique([email, workspaceId])
}

model Workspace {
    id        Int      @id @default(autoincrement())
    name      String?  @db.VarChar(50)
    email     String?  @db.VarChar(50)
    phone     String?  @db.VarChar(15)
    tradeName String?  @db.VarChar(50)
    document  String?  @db.VarChar(20)
    ie        String?  @db.VarChar(20)
    isActive  Boolean  @default(true)
    logo      String?  @db.VarChar(80)
    slug      String   @unique @db.VarChar(30)
    createdAt DateTime @default(now()) @db.Timestamp(6)
    ownerId   Int
    User      User?    @relation(fields: [ownerId], references: [id])
    addressId Int?
    Address   Address? @relation(fields: [addressId], references: [id])

    Customer Customer[]
    services Service[] // Relacionamento com os servi√ßos
}

model Service {
    id          Int       @id @default(autoincrement())
    name        String
    description String
    price       Float
    duration    String? // Campo opcional
    category    String? // Campo opcional
    workspaceId Int
    Workspace   Workspace @relation(fields: [workspaceId], references: [id])
}
